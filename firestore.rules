rules_version='2'

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is a member of a family
    function isFamilyMember(familyId) {
      return request.auth != null && 
             request.auth.uid in get(/databases/$(database)/documents/families/$(familyId)).data.members;
    }
    
    // Helper function to check if user is member of the family that owns the document
    function isFamilyMemberOfDocument(document) {
      return request.auth != null && 
             isFamilyMember(document.data.familyId);
    }
    
    // Helper function to get user's familyId
    function getUserFamilyId(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.familyId;
    }
    
    // Helper function to check if user is accessing their own family's data
    function isOwnFamilyData(familyId) {
      return request.auth != null && 
             getUserFamilyId(request.auth.uid) == familyId;
    }
    
    // Helper function to check if user is super admin
    function isSuperAdmin() {
      return request.auth != null && 
             request.auth.token.email == 'mholzi@gmail.com';
    }
    
    // Users - can only read/write own profile, family members can read, super admin can read
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || 
                      (resource.data.familyId != null && 
                       isFamilyMember(resource.data.familyId)) ||
                      isSuperAdmin());
      allow write: if request.auth != null && 
                      request.auth.uid == userId;
    }
    
    // Families - only family members can read/write, super admin can read
    match /families/{familyId} {
      allow read: if isFamilyMember(familyId) || isSuperAdmin();
      allow write: if isFamilyMember(familyId);
      
      // Shopping Lists - family members only with additional validation
      match /shopping/{shoppingId} {
        allow read: if isFamilyMember(familyId);
        allow write: if isFamilyMember(familyId) && 
                       request.resource.data.familyId == familyId;
        allow create: if isFamilyMember(familyId) && 
                        request.resource.data.familyId == familyId;
        allow delete: if isFamilyMember(familyId);
      }
      
      // Household Todos Subcollection - family members only
      match /householdTodos/{todoId} {
        allow read, write: if isFamilyMember(familyId);
        allow create: if isFamilyMember(familyId);
        allow delete: if isFamilyMember(familyId);
      }
      
      // Family Notes - family members only
      match /familyNotes/{noteId} {
        allow read, write: if isFamilyMember(familyId);
        allow create: if isFamilyMember(familyId);
        allow delete: if isFamilyMember(familyId);
      }
      
      // Family subcollections (e.g., data/items for shopping intelligence)
      match /{subcollection=**} {
        allow read, write: if isFamilyMember(familyId);
      }
    }
    
    // Children - only family members can access
    match /children/{childId} {
      allow read, write: if request.auth != null && 
                           resource != null && 
                           isFamilyMember(resource.data.familyId);
      // Allow create if user is creating child for their family
      allow create: if request.auth != null && 
                      isFamilyMember(request.resource.data.familyId);
    }
    
    // Tasks - only assigned user or family members can access
    match /tasks/{taskId} {
      allow read: if request.auth != null && 
                    (resource.data.assignedTo == request.auth.uid || 
                     isFamilyMember(resource.data.familyId));
      allow write: if request.auth != null && 
                     isFamilyMember(resource.data.familyId);
      allow create: if request.auth != null && 
                      isFamilyMember(request.resource.data.familyId);
    }
    
    // Household Todos - family members only
    match /householdTodos/{todoId} {
      allow read, write: if request.auth != null && 
                           resource != null && 
                           isFamilyMember(resource.data.familyId);
      allow create: if request.auth != null && 
                      isFamilyMember(request.resource.data.familyId);
    }
    
    // Calendar Events - family members and attendees can read
    match /calendarEvents/{eventId} {
      allow read: if request.auth != null && 
                    (isFamilyMember(resource.data.familyId) || 
                     request.auth.uid in resource.data.attendees);
      allow write: if request.auth != null && 
                     isFamilyMember(resource.data.familyId);
      allow create: if request.auth != null && 
                      isFamilyMember(request.resource.data.familyId);
    }
    
    
    // Notes - family members only, with child-specific access
    match /notes/{noteId} {
      allow read: if request.auth != null && 
                    resource != null && 
                    isFamilyMember(resource.data.familyId);
      allow write: if request.auth != null && 
                     resource != null && 
                     isFamilyMember(resource.data.familyId);
      allow create: if request.auth != null && 
                      isFamilyMember(request.resource.data.familyId);
    }
    
    // Recurring Activities - family members only
    match /recurringActivities/{activityId} {
      allow read: if request.auth != null && 
                    resource != null && 
                    isFamilyMember(resource.data.familyId);
      allow update: if request.auth != null && 
                      resource != null && 
                      isFamilyMember(resource.data.familyId);
      allow delete: if request.auth != null && 
                      resource != null && 
                      isFamilyMember(resource.data.familyId);
      allow create: if request.auth != null && 
                      isFamilyMember(request.resource.data.familyId);
    }
    
    // External Events - read-only for authenticated users (shared external calendar data)
    match /externalEvents/{eventId} {
      allow read: if request.auth != null;
      allow write: if false; // External events are read-only
    }
    
    // Integration Logs - system use only (no user access)
    match /integrationLogs/{logId} {
      allow read, write: if false;
    }
    
    // Payment Deadlines - system use only (no user access)  
    match /paymentDeadlines/{deadlineId} {
      allow read, write: if false;
    }
    
    // Test Connection - system use only (no user access)
    match /test-connection/{testId} {
      allow read, write: if false;
    }
    
    // Conversations - only participants can access
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
                           request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
                      request.auth.uid in request.resource.data.participants;
      
      // Messages within conversations
      match /messages/{messageId} {
        allow read: if request.auth != null && 
                      request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow write: if request.auth != null && 
                       request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if request.auth != null && 
                        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // TEMPORARY: Allow authenticated users to access all documents for debugging
    // TODO: Remove this rule and fix the family membership check
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}